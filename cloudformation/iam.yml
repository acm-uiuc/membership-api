AWSTemplateFormatVersion: '2010-09-09'
Description: ACM Membership API - IAM roles
Transform: AWS::Serverless-2016-10-31
Parameters:
  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
  AuthLambdaFunctionName:
    Default: undefined
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
Conditions:
  AuthorizerFunctionEnabled:
    Fn::Not:
    - Fn::Equals:
      - Ref: AuthLambdaFunctionName
      - undefined
Resources:
  AuthLambdaIAMRole:
    Condition: AuthorizerFunctionEnabled
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AuthLambdaFunctionName}:*
        PolicyName: lambda
  ApiLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeSubnets
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
            Resource: '*'
        PolicyName: lambda
      - PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - secretsmanager:GetSecretValue
              Effect: Allow
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:infra-membership-api-secrets*
        PolicyName: lambda-secret
      - PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
                - dynamodb:*
              Effect: Allow
              Resource:
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-membership-api-cache
                - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/infra-membership-api-external-lists
        PolicyName: lambda-dynamo
Outputs:
  MainFunctionRoleArn:
    Description: Main API IAM role ARN
    Value:
      Fn::GetAtt:
      - ApiLambdaIAMRole
      - Arn
  AuthFunctionRoleArn:
    Condition: AuthorizerFunctionEnabled
    Description: Authorizer lambda IAM role ARN
    Value:
      Fn::GetAtt:
      - AuthLambdaIAMRole
      - Arn