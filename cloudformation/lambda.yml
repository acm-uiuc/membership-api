AWSTemplateFormatVersion: 2010-09-09
Description: Membership API
Transform: AWS::Serverless-2016-10-31

Parameters:
  Env:
    Description: Environment
    Type: String
    AllowedValues: [ 'dev', 'prod' ]
  AlertSNSArn:
    Description: SNS Queue to send alarm alerts to
    Type: String
    Default: arn:aws:sns:us-east-1:298118738376:infra-monitor-alerts
  ApiDomainName:
    Type: String
    Default: membership.acm.illinois.edu

  ApiCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:298118738376:certificate/93955040-5806-4188-b01f-9c16eddb78e4

  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-lambda

  StripeLambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-stripe-checkout-lambda

  MembershipApiCacheTableName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-cache

  EnrollLambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-aad-enroll-lambda
  
  MembershipApiGWName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-gw
  
  AADSecretName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-aad-secret

  StripeSecretName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: infra-membership-api-stripe-secret

Conditions:
  IsProd: !Equals [!Ref Env, 'prod']

Resources:
  # API Lambda

  MembershipApiCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MembershipApiCacheTableName
      TimeToLiveSpecification:
        AttributeName: TimeToLive
        Enabled: true
      AttributeDefinitions:
        - 
          AttributeName: key
          AttributeType: S
      KeySchema:
        - 
          AttributeName: key
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        - Key: "project"
          Value: "infra-admin-api"
        - Key: "techlead"
          Value: "pc42@illinois.edu"

  MembershipApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../code 
      AutoPublishAlias: live
      Runtime: python3.10
      Description: Membership API Lambda
      FunctionName: !Ref LambdaFunctionName
      Handler: api.lambda_handler
      MemorySize: 2048
      Role: !GetAtt MembershipApiLambdaIAMRole.Arn
      Timeout: 60

  MembershipApiLambdaFunctionErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${MembershipApiLambdaFunction}-alarm'
      AlarmDescription: !Sub 'Alarm if ${MembershipApiLambdaFunction} function errors are detected.'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'
      Statistic: 'Sum'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '0'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref MembershipApiLambdaFunction

  MembershipApiLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AADSecretName}*
          PolicyName: lambda-secret
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MembershipApiCacheTableName}
          PolicyName: lambda-dn

  MembershipApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 7

# Stripe Checkout
  MembershipApiStripeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../code/create-stripe-checkout
      AutoPublishAlias: live
      Runtime: python3.10
      Description: Membership API - Checkout Stripe Session Lambda
      FunctionName: !Ref StripeLambdaFunctionName
      Handler: app.lambda_handler
      MemorySize: 1024
      Role: !GetAtt MembershipApiStripeLambdaIAMRole.Arn
      Timeout: 60

  MembershipApiStripeLambdaFunctionErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${MembershipApiStripeLambdaFunction}-alarm'
      AlarmDescription: !Sub 'Alarm if ${MembershipApiStripeLambdaFunction} function errors are detected.'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'
      Statistic: 'Sum'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '0'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref MembershipApiStripeLambdaFunction

  MembershipApiStripeLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StripeLambdaFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${StripeSecretName}*
          PolicyName: lambda-secret

  MembershipApiStripeLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StripeLambdaFunctionName}
      RetentionInDays: 7

# AAD Provisioning
  MembershipApiEnrollLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../code/aad-enroll
      AutoPublishAlias: live
      Runtime: python3.10
      Description: Membership API - Enroll New Paid Members Lambda
      FunctionName: !Ref EnrollLambdaFunctionName
      Handler: app.lambda_handler
      MemorySize: 1024
      Role: !GetAtt MembershipApiEnrollLambdaIAMRole.Arn
      Timeout: 60

  MembershipApiEnrollLambdaFunctionErrorAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${MembershipApiEnrollLambdaFunction}-alarm'
      AlarmDescription: !Sub 'Alarm if ${MembershipApiEnrollLambdaFunction} function errors are detected.'
      Namespace: 'AWS/Lambda'
      MetricName: 'Errors'
      Statistic: 'Sum'
      Period: '60'
      EvaluationPeriods: '1'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '0'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref MembershipApiEnrollLambdaFunction

  MembershipApiEnrollLambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${EnrollLambdaFunctionName}:*
          PolicyName: lambda
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${StripeSecretName}*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AADSecretName}*
          PolicyName: lambda-secret
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - dynamodb:*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MembershipApiCacheTableName}
          PolicyName: lambda-dn

  MembershipApiEnrollLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EnrollLambdaFunctionName}
      RetentionInDays: 7

# API Gateway
  MembershipApiGateway:
    Type: AWS::Serverless::Api
    DependsOn: 
      - MembershipApiLambdaFunction
      - MembershipApiStripeLambdaFunction
    Properties:
      Name: !Ref MembershipApiGWName
      Description: Membership API Gateway
      AlwaysDeploy: True
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ../docs/swagger.yml
      Domain: 
        DomainName: !Ref ApiDomainName
        CertificateArn: !Ref ApiCertificateArn
      StageName: default

  MembershipApiGatewayLatencyAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: IsProd
    Properties:
      AlarmName: !Sub '${MembershipApiGWName}-latency-alarm'
      AlarmDescription: !Sub 'Alarm if ${MembershipApiGWName} API gateway latency > 2s for 3 min.'
      Namespace: 'AWS/ApiGateway'
      MetricName: 'Latency'
      Statistic: 'Average'
      Period: '60'
      EvaluationPeriods: '3'
      ComparisonOperator: 'GreaterThanThreshold'
      Threshold: '2000'
      AlarmActions:
        - !Ref AlertSNSArn
      Dimensions:
        - Name: 'ApiName'
          Value: !Ref MembershipApiGWName

  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - MembershipApiLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref MembershipApiGateway
          - "/*/*/*"

  APIStripeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - MembershipApiStripeLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref MembershipApiGateway
          - "/*/*/*"
          
  APIEnrollLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - MembershipApiEnrollLambdaFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref MembershipApiGateway
          - "/*/*/*"

Outputs:
  ApiUrl:
    Value: !Sub
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/default
      - ApiId: !Ref MembershipApiGateway
